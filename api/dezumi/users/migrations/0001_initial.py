# Generated by Django 3.2.11 on 2022-02-19 19:59

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('others', '0001_initial'),
        ('shows', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('achievements', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=30)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=6, null=True)),
                ('total_likes', models.IntegerField(default=0)),
                ('total_followers', models.IntegerField(default=0)),
                ('total_followed', models.IntegerField(default=0)),
                ('total_friends', models.IntegerField(default=0)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='users/profile_pictures/')),
                ('level', models.IntegerField(default=0)),
                ('experience', models.IntegerField(default=0)),
                ('gins', models.IntegerField(default=0, help_text='Gin is the currency that can be used in the store.')),
                ('is_verified', models.BooleanField(default=False, help_text='Verifies the authenticity of an account.')),
                ('is_private', models.BooleanField(default=False, help_text='A private account only can be seen by friends.')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('timestampbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='others.timestampbase')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='achievements.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('others.timestampbase',),
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('timestampbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='others.timestampbase')),
                ('liked', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked', to=settings.AUTH_USER_MODEL)),
                ('liker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liker', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('others.timestampbase',),
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('timestampbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='others.timestampbase')),
                ('followed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed', to=settings.AUTH_USER_MODEL)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('others.timestampbase',),
        ),
        migrations.AddField(
            model_name='user',
            name='achievements',
            field=models.ManyToManyField(blank=True, through='users.UserAchievement', to='achievements.Achievement'),
        ),
        migrations.AddField(
            model_name='user',
            name='featured_title',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='featured_title', to='achievements.achievement'),
        ),
        migrations.AddField(
            model_name='user',
            name='follows',
            field=models.ManyToManyField(blank=True, through='users.Follow', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='likes',
            field=models.ManyToManyField(blank=True, related_name='userslikes', through='users.Like', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='show_dislikes',
            field=models.ManyToManyField(blank=True, related_name='show_dislikes', to='shows.Show'),
        ),
        migrations.AddField(
            model_name='user',
            name='show_favorites',
            field=models.ManyToManyField(blank=True, related_name='show_favorites', to='shows.Show'),
        ),
        migrations.AddField(
            model_name='user',
            name='show_likes',
            field=models.ManyToManyField(blank=True, related_name='show_likes', to='shows.Show'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.UniqueConstraint(fields=('liked', 'liker'), name='users_like_unique_relationships'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.CheckConstraint(check=models.Q(('liker', django.db.models.expressions.F('liked')), _negated=True), name='users_like_prevent_self_follow'),
        ),
        migrations.AddConstraint(
            model_name='follow',
            constraint=models.UniqueConstraint(fields=('followed', 'follower'), name='users_follow_unique_relationships'),
        ),
        migrations.AddConstraint(
            model_name='follow',
            constraint=models.CheckConstraint(check=models.Q(('follower', django.db.models.expressions.F('followed')), _negated=True), name='users_follow_prevent_self_follow'),
        ),
    ]
